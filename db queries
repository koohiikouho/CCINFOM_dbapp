Queries List

View All Movies In the Database
SELECT *
FROM movies m
ORDER BY m.movie_code;

View How Many Times Each Movie has been borrowed
(Using Name)
SELECT m.movie_code, m.movie_name, COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
WHERE m.movie_name LIKE ? // For JAVA GUI '?' as placeholder
GROUP BY m.movie_name, t.movie_code
ORDER BY t.movie_code;

(Using Code)
SELECT m.movie_code, m.movie_name, COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
WHERE m.movie_code = ? // For JAVA GUI '?' as placeholder
GROUP BY m.movie_name, t.movie_code
ORDER BY t.movie_code;

See reviews per movie
SELECT u.first_name,u.last_name,m.movie_name,r.stars,r.review
FROM review r
JOIN movies m ON m.movie_code = r.movie_code
JOIN users u ON u.user_no = r.user_no
WHERE m.movie_code = '?'
ORDER BY m.movie_code;

Viewing user profiles
(User Data)
SELECT *
FROM users u
WHERE u.user_id = ?; // For JAVA GUI '?' as placeholder

(Borrow History)
SELECT u.user_no,u.first_name,u.last_name,m.movie_name,t.date_borrowed,t.date_returned
FROM transactions t
JOIN users u ON u.user_no = t.user_no
JOIN movies m ON m.movie_code = t.movie_code
WHERE u.user_id = ? // For JAVA GUI '?' as placeholder
ORDER BY t.date_borrowed;

(User Review History)
SELECT u.first_name,u.last_name,m.movie_name,r.stars,r.review
FROM review r
JOIN movies m ON m.movie_code = r.movie_code
JOIN users u ON u.user_no = r.user_no
WHERE u.user_no = '?'
ORDER BY m.movie_code;

Change password
UPDATE `users`
SET `password` = ?
WHERE user_no = ? AND `password` = ?;

Request a movie
INSERT 
INTO movie_req 
(movie_name, date filed, user_no, approved, in_stock, media_type) " +
"VALUES (?, ?, ?, ?, ?, ?);

Movies borrowed in a day,month,year
Day
SELECT DATE(t.date_borrowed) AS `Date Borrowed`, COUNT(t.movie_code) AS `Number of Movies Borrowed`
FROM transactions t
WHERE DATE(t.date_borrowed) = '?'
WHERE YEAR(t.date_borrowed) = '?' AND MONTH(t.date_borrowed) = '?'
GROUP BY `Date Borrowed`
ORDER BY `Date Borrowed`;

Month
SELECT YEAR(t.date_borrowed) AS `Year`,MONTH(t.date_borrowed) AS `Month`,COUNT(t.movie_code) AS `Number of Movies Borrowed`
FROM transactions t
WHERE YEAR(t.date_borrowed) = '?' AND MONTH(t.date_borrowed) = '?'
GROUP BY `Year`, `Month`
ORDER BY `Year`, `Month`;

Year
SELECT YEAR(t.date_borrowed) AS `Year`,COUNT(t.movie_code) AS `Number of Movies Borrowed`
FROM transactions t
WHERE YEAR(t.date_borrowed) = '?'
GROUP BY `Year`
ORDER BY `Year`;

List of most borrowed movies
Monthly
SELECT YEAR(t.date_borrowed) AS `Year`, MONTH(t.date_borrowed) AS `Month`, m.movie_code, m.movie_name,gt.description AS `Genre`, COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON gt.genre_id = m.genre_id
WHERE YEAR(t.date_borrowed) = '?' AND MONTH(t.date_borrowed) = '?' AND gt.genre_id = '?'
GROUP BY YEAR(t.date_borrowed), MONTH(t.date_borrowed), m.movie_code
ORDER BY `Times Borrowed` DESC;

Yearly
SELECT YEAR(t.date_borrowed) AS `Year`, m.movie_code, m.movie_name,gt.description AS `Genre`, COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON gt.genre_id = m.genre_id
WHERE YEAR(t.date_borrowed) = '?' AND gt.genre_id = '?'
GROUP BY YEAR(t.date_borrowed), m.movie_code
ORDER BY `Times Borrowed` DESC;

In General
SELECT m.movie_code, m.movie_name,gt.description AS `Genre`,COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON gt.genre_id = m.genre_id
GROUP BY m.movie_code
ORDER BY `Times Borrowed` DESC;

Most popular movie genres are based on borrow rate(per month, year)

Month
SELECT YEAR(t.date_borrowed) AS `Year`, MONTH(t.date_borrowed) AS `Month`, gt.genre_id,gt.description, COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON gt.genre_id = m.genre_id
WHERE YEAR(t.date_borrowed) = '?' AND MONTH(t.date_borrowed) = '?'
GROUP BY YEAR(t.date_borrowed), MONTH(t.date_borrowed), gt.genre_id
ORDER BY `Times Borrowed` DESC;

Year
SELECT YEAR(t.date_borrowed) AS `Year` gt.genre_id,gt.description, COUNT(t.movie_code) AS `Times Borrowed`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON gt.genre_id = m.genre_id
WHERE YEAR(t.date_borrowed) = '?'
GROUP BY YEAR(t.date_borrowed), gt.genre_id
ORDER BY `Times Borrowed` DESC;

approved and disapproved movie requests
SELECT mr.date_filed,mr.movie_name,mr.media_type,
CASE 
        WHEN mr.approved = 1 THEN 'Approved'
        WHEN mr.approved = 0 THEN 'Rejected'
        WHEN mr.approved IS NULL THEN 'Processing'
    END AS `Status`
FROM movie_req mr
JOIN users u ON u.user_no = mr.user_no
WHERE mr.date_filed IS NOT NULL
ORDER BY mr.date_filed;

most requested movies
In general
SELECT mr.movie_name,COUNT(mr.movie_name) AS `Number of Requests`
FROM movie_req mr
GROUP BY mr.movie_name
ORDER BY `Number of Requests` DESC;

Monthly
SELECT YEAR(mr.date_filed) AS `Year`, MONTH(mr.date_filed) AS `Month`,mr.movie_name,COUNT(mr.movie_name) AS `Number of Requests`
FROM movie_req mr
WHERE YEAR(mr.date_filed) = '?' AND MONTH(mr.date_filed) = '?'
GROUP BY YEAR(mr.date_filed), MONTH(mr.date_filed), mr.movie_name
ORDER BY `Number of Requests` DESC;

Yearly
SELECT YEAR(mr.date_filed) AS `Year`,mr.movie_name,COUNT(mr.movie_name) AS `Number of Requests`
FROM movie_req mr
WHERE YEAR(mr.date_filed) = '?'
GROUP BY YEAR(mr.date_filed),mr.movie_name
ORDER BY `Number of Requests` DESC;

rental history of a movie
SELECT m.movie_code,m.movie_name,u.user_no,CONCAT(u.first_name,' ',u.last_name) AS `Borrower Name`,t.date_borrowed,t.date_toreturn,t.date_returned
FROM transactions t
JOIN users u ON t.user_no = u.user_no
JOIN movies m ON m.movie_code = t.movie_code
WHERE m.movie_code = '?'
ORDER BY m.movie_code;

Users who borrowed the most movies
Monthly
SELECT YEAR(t.date_borrowed) AS `Year`, MONTH(t.date_borrowed) AS `Month`,u.first_name,u.last_name,COUNT(t.user_no) AS `Number of Movies Borrowed`
FROM users u
JOIN transactions t ON u.user_no = t.user_no
WHERE YEAR(t.date_borrowed) = '?' AND MONTH(t.date_borrowed) = '?'
GROUP BY `year`,`month`,t.user_no
ORDER BY `Number of Movies Borrowed` DESC;

Yearly
SELECT YEAR(t.date_borrowed) AS `Year`,u.first_name,u.last_name,COUNT(t.user_no) AS `Number of Movies Borrowed`
FROM users u
JOIN transactions t ON u.user_no = t.user_no
WHERE YEAR(t.date_borrowed) = '?'
GROUP BY `year`,t.user_no
ORDER BY `Number of Movies Borrowed` DESC;

successful return rate (on time)
Monthly
SELECT YEAR(t.date_borrowed) AS `Year`,MONTH(t.date_borrowed) AS `Month`,FORMAT((SUM(t.date_returned <= t.date_toreturn AND t.date_returned IS NOT NULL) / COUNT(t.transaction_no)) * 100, 2) AS `Successful Return Rate (%)`
FROM transactions t
WHERE t.date_returned IS NOT NULL AND YEAR(t.date_borrowed) = '?' AND MONTH(t.date_borrowed) = '?'
GROUP BY YEAR(t.date_borrowed), MONTH(t.date_borrowed);

Yearly
SELECT YEAR(t.date_borrowed) AS `Year`,FORMAT((SUM(t.date_returned <= t.date_toreturn AND t.date_returned IS NOT NULL) / COUNT(t.transaction_no)) * 100, 2) AS `Successful Return Rate (%)`
FROM transactions t
WHERE t.date_returned IS NOT NULL AND YEAR(t.date_borrowed) = '?'
GROUP BY YEAR(t.date_borrowed);

users who violated the return policy
SELECT u.user_no,u.first_name,u.last_name,m.movie_name,t.date_borrowed,t.date_toreturn,t.date_returned,t.payment,IF(t.date_returned IS NOT NULL, 'Resolved', 'Unresolved') AS `Status`
FROM transactions t
JOIN users u ON t.user_no = u.user_no
JOIN movies m ON t.movie_code = m.movie_code
WHERE t.date_toreturn < t.date_returned OR (t.date_toreturn < CURDATE() AND t.date_returned IS NULL)
ORDER BY t.transaction_no;

total revenue from movie rentals, etc

Monthly
SELECT YEAR(t.date_returned) AS `Year`,MONTH(t.date_returned) AS `Month`,SUM(t.payment) AS `Total Revenue`
FROM transactions t
WHERE YEAR(t.date_returned) = '?' AND MONTH(t.date_returned) = '?' AND t.date_returned IS NOT NULL
GROUP BY `Year`,`Month`;

Yearly
SELECT YEAR(t.date_returned) AS `Year`,SUM(t.payment) AS `Total Revenue`
FROM transactions t
WHERE YEAR(t.date_returned) = '?'
GROUP BY `Year`;

most profitable movies per genre

Monthly
SELECT YEAR(t.date_returned) AS `Year`,MONTH(t.date_returned) AS `Month`,gt.genre_id,gt.description,m.movie_code,m.movie_name,SUM(t.payment) AS `Total Revenue`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON m.genre_id = gt.genre_id
WHERE YEAR(t.date_returned) = '?' AND MONTH(t.date_returned) = '?'
GROUP BY YEAR(t.date_returned), MONTH(t.date_returned), gt.genre_id, m.movie_code
ORDER BY gt.genre_id, `Total Revenue` DESC;

Yearly
SELECT YEAR(t.date_returned) AS `Year`,gt.genre_id,gt.description,m.movie_code,m.movie_name,SUM(t.payment) AS `Total Revenue`
FROM transactions t
JOIN movies m ON m.movie_code = t.movie_code
JOIN genre_type gt ON m.genre_id = gt.genre_id
WHERE YEAR(t.date_returned) = '?'
GROUP BY YEAR(t.date_returned) gt.genre_id, m.movie_code
ORDER BY gt.genre_id, `Total Revenue` DESC;

most profitable users

Monthly
SELECT YEAR(t.date_returned) AS `YEAR`,MONTH(t.date_returned) AS `MONTH`,u.first_name,u.last_name,SUM(t.payment) AS `Total Payments`,SUM(TIMESTAMPDIFF(DAY, t.date_borrowed, t.date_toreturn) * mt.rental_price) AS `Rental Fees`,SUM(t.payment - (TIMESTAMPDIFF(DAY, t.date_borrowed, t.date_toreturn) * mt.rental_price)) AS `Late and Additional Fees`
FROM users u
JOIN transactions t ON u.user_no = t.user_no
JOIN media_type mt ON t.product_id = mt.product_id
WHERE t.date_returned IS NOT NULL AND YEAR(t.date_returned) = '?' AND MONTH(t.date_returned) = '?'
GROUP BY u.user_no,`YEAR`,`MONTH`
ORDER BY `Total Payments` DESC;

Yearly
SELECT YEAR(t.date_returned) AS `YEAR`,u.first_name,u.last_name,SUM(t.payment) AS `Total Payments`,SUM(TIMESTAMPDIFF(DAY, t.date_borrowed, t.date_toreturn) * mt.rental_price) AS `Rental Fees`,SUM(t.payment - (TIMESTAMPDIFF(DAY, t.date_borrowed, t.date_toreturn) * mt.rental_price)) AS `Late and Additional Fees`
FROM users u
JOIN transactions t ON u.user_no = t.user_no
JOIN media_type mt ON t.product_id = mt.product_id
WHERE t.date_returned IS NOT NULL AND YEAR(t.date_returned) = '?'
GROUP BY u.user_no,`YEAR`
ORDER BY `Total Payments` DESC;
